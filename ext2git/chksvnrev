#!/usr/bin/env perl

use utf8;
use strict;
use warnings;

use Getopt::Long;

use Cwd qw/getcwd/;

use File::Find;

use Data::Dumper;

sub extract_revision
{
	my $line = shift;
	my $rev = 0;
	if($line =~ m|\s*git-svn-id: (.+?)@(\d+)\s+([0-9a-f\-]+)|){
		$rev = $2;
	}

	return $rev;
}


sub extract_latest_rev
{
	my $dirpath = shift;
	my $rev = 0;

	my $cmd = "git -C $dirpath log -1";
	my $res = `$cmd`;
	#printf($res);
	my @lines = split(/\r?\n/, $res);
	foreach my $line (@lines){
		if($line =~ m|git-svn-id|){
			#printf("LINE : %s\n", $line);
			$rev = extract_revision($line);
			#printf("rev : %s\n", $rev);
		}
	}

	return $rev;
}

sub find_git_dirs
{
	my $root_dir = shift;
		
	my $dirpath;
	my $gitdirs = [];

	$root_dir =~ s|[\\/]$||;

	#printf("DEBUG : root_dir $root_dir\n");

	find(
		{
			wanted => sub {
				$dirpath = $File::Find::name;
				if(-d $dirpath && $dirpath =~ m|/.git$| ){
					$dirpath =~ s|/.git$||;
					$dirpath =~ s|$root_dir[\\/]?||;

					#printf("DEBUG : dirpath $dirpath\n");
					if($root_dir ne $dirpath){
						push(@{$gitdirs}, $dirpath);
					}
				}
			},
			no_chdir => 1
		},
		$root_dir
	);

	return $gitdirs;
}

sub get_latest_svn_rev
{
	my $dirpath = shift;
	my $rev = -1;

	#printf("%s\n", $dirpath);
	my $cmd = "git -C $dirpath log -1";
	my $res = `$cmd`;
	#printf($res);
	my @lines = split(/\r?\n/, $res);
	foreach my $line (@lines){
		if($line =~ m|git-svn-id|){
			#printf("LINE : %s\n", $line);
			$rev = extract_revision($line);
			#printf("directory %s, rev %s\n", $dirpath, $rev);
		}
	}

	return $rev;

}

sub split_externals
{
	my $line = shift;
	my $work_dir = shift;

	my $url = "";
	my $rev = "";
	my $ext_dir = "";

	if($line =~ /$work_dir([^\s]+?)(@(\d+))?\s+([^\s]+)/){
		$url = $1;
		$rev = int($3);
		$ext_dir = $4;
	}

	return ($url, $rev, $ext_dir);
}


sub git_svn_externals
{
	my $work_dir = shift;
	
	my $cmd = "LANG=C git -C $work_dir svn show-externals";
	my $res = `$cmd`;
	my @lines = split(/[\r\n]/, $res);

	my $line;
	my $items = {};

	my ($key, $val);

	my $exts = {};

	foreach $line (@lines){
		#printf("%s\n", $line);
		if($line =~ /^\s*$/){
			next;
		}

		if($line =~ /^# (.*\/)$/){
			$work_dir = $1;
			next;
		}

		my ($url, $rev, $ext_dir) = split_externals($line, $work_dir);
		if($url ne "" && $ext_dir ne ""){
			$ext_dir = "." . $work_dir . $ext_dir;
			$ext_dir =~ s/^\.\///;

			my $tmp = "." . $work_dir;
			$tmp =~ s|/$||;

			my $ext = {
				"cwd" => $tmp,
				"url" => $url,
				"rev" => $rev
			};

			$exts->{$ext_dir} = $ext;
		}
		else{
			printf("invalid line, '%s'\n", $line);
			printf("  work_dir, '%s'\n", $work_dir);

			exit(1);
		}

	}

	return $exts;
}

sub git_svn_find_rev
{
	my $target_dir = shift;
	my $rev = shift;

	my $cmd = "git -C $target_dir svn find-rev r$rev";
	my $commit = `$cmd`;

	return $commit;
}

sub git_checkout
{
	my $work_dir = shift;
	my $commit = shift;

	my $cmd = "git -C $work_dir checkout $commit";
	my $res = `$cmd`;

	printf($res);
}

sub main
{
	my $ret = 0;
	my $options = {};

	GetOptions(
		$options,
		"help",
		"version",
		"output=s"
	);

	my $cmd;
	my $res;

	my $line;
	my $lines;

	my $target_dir;
	foreach $target_dir (@ARGV){
		$target_dir =~ s|[\\/]$||;

		#printf("target directory : %s\n", $target_dir);

		printf("INFO : finding git directories... ");
		my $git_dirs = find_git_dirs($target_dir);
		printf("done.\n");
		
		printf("INFO : get svn:externals...");
		my $exts = git_svn_externals($target_dir);
		printf("done.\n");
		printf(Dumper($exts));

		foreach my $dirpath (@{$git_dirs}){

			my $got = get_latest_svn_rev($target_dir . "/" . $dirpath);

			$dirpath =~ s|^$target_dir||;

			if($dirpath eq ""){
				next;
			}

			my $expected = $exts->{$dirpath}->{'rev'};
			my $verdict = '';

			if(!$expected){
				printf("\$exts->{$dirpath}->{'rev'} is not defined\n");
			}

			printf("check revision of %s/%s\n", $target_dir, $dirpath);
			printf("  expected : %s\n", $expected);
			printf("  got      : %s\n", $got);
			if($expected != $got){
				my $commit = git_svn_find_rev($target_dir . "/" . $dirpath, $expected);
				printf("  commit of rev %d found, %s\n", $expected, $commit);
				git_checkout($target_dir . "/" . $dirpath, $commit);
			}
			else{
				$verdict = "passed";
			}
			#printf("  verdict : %s\n", $verdict);
		}
	}

}

main();

